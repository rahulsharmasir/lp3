1. 
 
#import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings 
#We do not want to see warnings
warnings.filterwarnings("ignore") 

2.

#import data
data = pd.read_csv("uber.csv")

3. 

#Create a data copy
df = data.copy()

4. 

#Print data
df.head

5. 

#Get Info
df.info()

6.

#pickup_datetime is not in required data format
df["pickup_datetime"] = pd.to_datetime(df["pickup_datetime"])

7.

df.info()

8.

#Statistics of data
df.describe()

9.

#Number of missing values
df.isnull().sum()

10.

#Correlation
df.corr()

11.

#Drop the rows with missing values
df.dropna(inplace=True)

12.

plt.boxplot(df['fare_amount'])

13.

#Remove Outliers
q_low = df["fare_amount"].quantile(0.01)
q_hi  = df["fare_amount"].quantile(0.99)

df = df[(df["fare_amount"] < q_hi) & (df["fare_amount"] > q_low)]

14.

#Check the missing values now
df.isnull().sum()

15.

#Time to apply learning models
from sklearn.model_selection import train_test_split

16.

#Take x as predictor variable
x = df.drop("fare_amount", axis = 1)
#And y as target variable
y = df['fare_amount']

17.

#Necessary to apply model
x['pickup_datetime'] = pd.to_numeric(pd.to_datetime(x['pickup_datetime']))
x = x.loc[:, x.columns.str.contains('^Unnamed')]

18.

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)

19. 

from sklearn.linear_model import LinearRegression

20. 

lrmodel = LinearRegression()
lrmodel.fit(x_train, y_train)

21.

#Prediction
predict = lrmodel.predict(x_test)

22.

#Check Error
from sklearn.metrics import mean_squared_error
lrmodelrmse = np.sqrt(mean_squared_error(predict, y_test))
print("RMSE error for the model is ", lrmodelrmse)

23. 

#Let's Apply Random Forest Regressor
from sklearn.ensemble import RandomForestRegressor
rfrmodel = RandomForestRegressor(n_estimators = 100, random_state = 101)

24.

#Fit the Forest
rfrmodel.fit(x_train, y_train)
rfrmodel_pred = rfrmodel.predict(x_test)

25. 

#Errors for the forest
rfrmodel_rmse = np.sqrt(mean_squared_error(rfrmodel_pred, y_test))
print("RMSE value for Random Forest is:",rfrmodel_rmse)